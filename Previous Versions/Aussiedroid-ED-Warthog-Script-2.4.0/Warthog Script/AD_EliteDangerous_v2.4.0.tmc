//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// AUSSIEDROID'S ACKNOWLEDGEMENTS //																															//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// Standing on the Shoulders of Giants! Creation of this TARGET Script would not have been possible without amazing ED Scripts I found online created by:		//
// Alexandr Zhevedenko, Michael Lehman (WraithMG11235), Darkcyde0 & Thomas Duployez (CMDR Touille).	You All Rock! Thank you!									//
// 																																								//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// VERSION HISTORY //																																			//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// Version 2.4.0																																				//
// Released September, 2016	(Updated Jun 17)																													//
// =============================================================================================================================================================//
// v2.4 - NEW: Auto Timer for Repeater Fire, Fast Menu Switch Macro, VR/TIR Headlook Swap U.Pref SWAP: S.Running/R.Correction Toggles. IMPROVED: Error Handling.//
// v2.3.3-COMBINED FAOFF+ALT FLT (SpeedBrake w/ Pinky Mod) NEW: Escape Macro now has Gear/Scoop Check + new timings. FIX: Chat Macros when Comms Panel is Open.	//
// v2.3.2-SWAPPED: Repeater Fire & Combo Fire Modifier buttons. ADD: CruiseOnThrottle check for China Hat, removes FSD as req. FIX: IDLEMaster Function error.  //
// v2.3.1-FIXED: 75% Trim T.Preset, + General Comments Cleanup NEW: Macros 2-Tier PIPs (Hold), Swap Joy/Throt Preset Toggles ADD: Chat Macro print layout map.	//
// v2.3 - COMMANDERS UPDATE: ADD New Multicrew, HoloME & Camera Suite Keybinds. NEW: Text Chat Macros (PIP Hatswitch+Pinky Trigger). NEW: ShowGameStats Macro.	//
// v2.3 - NEW: SC 100% Throttle/Repeater Fire/Signal Light Macros. ADD: 1&2-Tier PIP Alts,User Prefs,MFDs. MOVED: Hardpoints to T.Arm. FIXED: SRV Boost on Slew.//
// v2.2.7-NEW: Heatsink+SilentRunning Mod! FIXED: Dead Throttle on Run/Looping running in Script Editor/Improved FPS/Bandwidth Toggle/Galaxy Map chat conflict. //
// v2.2.6-Changed SRV Digital Steering Hat Switch, Swapped Weapon Fire Group. ADD: Auto-Dock Short/Long press+Pinky. No Shadowplay ref. ADD Fighter Orders.		//
// v2.2.5-ADD: Charge ECM button & Fixed Incorrect ED Bindings file in download.																				//
// v2.2.4-FIXED: Changed Combo Fire Modifier from Pinky to CMS Hat Switch (avoid conflict). Improved PIP timings/refined layout. Removed SRV Handbrake conflict.//
// v2.2 - GUARDIANS UPDATE: ADD Fighters Hotkeys to Trim Hat, Mapped Weapon/Engine Color change. Improved IDLE saftey features. NEW Macros. Public Release! 	//
// v2.1 - ADD External Keymappings for TrackIR, VoiceAttack & ShadowPlay. SWAP Landing Gear & Silent Running. Changed some delay times.							//
// v2.0 - Full script cleanup & formatting update. ADD alt. Macros for PIPs & Curves to test. ADD Reference table for DX Mappings & USB Key Definitions.		//
// v1.8 - ADD SetThrottle function & Handbrake to Throttle IDLE lock. Ship Lights now dim Throttle LED backlight :) Steam added & Hidden FPS/Ping keys mapped.	//
// v1.6 - Improved Toggle switch usage. ADD LED output & expanded script print output in Script Editor.															//
// v1.3 - ADD Auto-dock, PIPs Macros & also Joystick & Throttle Curve presets. Plus Subsystem Prev Jump to Powerplant shortcut when holding Prev Subsystem.		//
// v1.0 - ADD All Standard KeyMaps, Default Axis settings & Core script structure/defaults. ADD Trigger Combo code. Debug testing.								//
// =============================================================================================================================================================//
// Created by Aussiedroid (http://steamcommunity.com/id/aussiedroid)																							//
// Full Guide Available here (http://steamcommunity.com/sharedfiles/filedetails/?id=769637037)																	//
// Frontier Forums Discussion Thread here (https://forums.frontier.co.uk/showthread.php/293027-Aussiedroid-s-Enhanced-Thrustmaster-Warthog-Script)				//
//																																								//
// Need help understanding this script?																															//
// Target Script Editor Manual URL: (http://ts.thrustmaster.com/download/accessories/pc/hotas/software/TARGET/TARGET_Script_Editor_Basics_v1.5_ENG.pdf)			//
// 																																								//
//													** RECOMMENDED RUNNING SCRIPT IN TARGET GUI **																//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// INCLUDED FILES //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
	include "Target.tmh" 												// Default System Import (Thrustmaster Target file)
	include "AD_EDSettings_v2.4.0.tmh" 									// Global Settings Definition & User Preferences
	include "AD_EDKeyMap_v2.4.0.ttm" 									// Key Mapping & Default Variable States
	include "AD_EDFunctions_v2.4.0.tmh" 								// Macros & Functions Definition

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// DEVICE CHECK //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
	int main() {														// Exclude Missing Devices
																
		Configure(&HCougar, MODE_EXCLUDED);
		Configure(&T16000, MODE_EXCLUDED);
		if(UseMFD == 0){												// No MFDs - Ignore configuring MFDs																
			Configure(&LMFD, MODE_EXCLUDED);
			Configure(&RMFD, MODE_EXCLUDED); }
		if(UseRudders == 1) Configure(&TFRPRudder, MODE_EXCLUDED);		// Enables independant T.Flight Rudders (for mapping direct in ED) *UNTESTED*
	
	if(Init(&EventHandle)) return 1;

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// BASE SETTINGS //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//	
	SetKBRate(PulseTime, DelayTime);														// Base Settings 	(See AD_EDSettings.tmh)
	SetKBLayout(KBLayout);
	
	ActKey(PULSE+KEYON+LED(&Throttle, LED_INTENSITY, SetLED)); 								// Enable LED Backlight on Start
																							// Initiate LED status
	ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1)); 						// set LED 1 ON 	[Flight Assist]
	ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED2)); 						// set LED 2 ON 	[Rotational Correction]
	ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3)); 						// set LED 3 OFF 	[Silent Running]
	ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4)); 						// set LED 4 OFF	[Cargo Scoop]
	ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED5)); 						// set LED 5 OFF	[Landing Gear]
	
	initCustomCommands();																	// Initiate Custom Macros & Functions (See AD_EDFunctions.tmh)
	initCustomTextCommands();																// Initiate Text Chat Macro presets (Can be modified/personalised in AD_EDFunctions.tmh)
	initSetThrottleCurves();																// Initiate Mapping of Custom Throttle Curves (3 Presets configurable in AD_EDSettings.tmh)
	initPrintState();																		// Initiate Display Script Settings to Output Window in Script/GUI
	initAdvancedPIPManagement();															// Initiate Mapping of PIP Macros (3 Presets configurable in AD_EDSettings.tmh)
	initToggleRotationCorrection();															// Initiate Toggle Mapping for Rotational Correction (LED Support)
	initToggleSilentRunning();																// Initiate Toggle Mapping for Silent Running (LED Support)
	initEnhancedFAOFF();																	// Initiate Toggle Mapping for Flight Assist Off (LED Support, Auto-Joystick Curve adjust)
	initToggleLandingGear();																// Initiate Toggle Mapping for Landing Gear (LED Support)
	initToggleCargoScoop();																	// Initiate Toggle Mapping for Cargo Scoop (LED Support)
	initToggleCamera();																		// Initiate Toggle Mapping for Debug Camera v2.2 (Auto-Exit Popup) *Unmapped*
	initSetCombinedFire(0);																	// Initiate Mapping Logic to enable/disable the Dual-Stage Primary Trigger with either Primary & Secondary Fire Combined OR Primary Fire Only (Nothing mapped to 2nd stage).
	initAdvancedFireModule();																// Initiate Advanced Function to manage Primary/Secondary Fire Preferences & Repeater Fire Integration
	initIDLEMaster();																		// Initiate Advanced Function to disable Throttle (& Boost) when engaging Throttle IDLE/Afterburner Lock Indent. Will also enable SRV Handbrake.
	initEscapeVector();																		// Initiate Advanced Macro to perform a tactical withdraw from combat (Retract Hardpoints, Set Defensive PIPs, Auto Boost/Chaff, Engage Supercruise)
	initTextChatPresets();																	// Initiate Mapping of Text Chat Macros to Hatswitch (2 Presets configurable in AD_EDSettings.tmh)
	initHeadlookModeSelect();																// Initiate Custom mapping preference for Headlook Centering based on your hardware (TrackIR, VR, Mouse)
	initHardpointManagement();																// Initiate Advanced Function integrating all Hardpoint/Other functions related to the Red Left Throttle Button
	initMicCommander();																		// Initiate Full control over Internal & External Mic Push-to-Talk functionality for Hold & Toggle configurations
	initDockNLightsEnhancer();																// Initiate Adhoc function that combines Auto-Dock & Signal Light Macros for the Autopilot Engage Button

	StartupLock = 0;																		// Startup Pre-checks: Releases Startup Lock (which is in place while initialising the Macros/Functions above)
	
	initJoystickAxis();																		// Initiate Axis Mappings
	initThrottleAxis();
	
	if(CruiseOnThrottle == 1){																// Supercruise on Throttle 100%
		KeyAxis(&Throttle, THR_RIGHT, 0, AXMAP1(LIST(0,99,100), 							// [Note: Throttle Axis 'Full Range' Curves adjusted -10% when active]
						   EXEC(
						  	   "if(Joystick[S4])  ActKey(KEYON+PULSE+FrameShiftDrive);"		// IF Pinky Modifier Held, Activate Hyperspace Jump
						  	   "if(Joystick[H4P]) ActKey(KEYON+PULSE+Supercruise);"			// IF CMS Modifier Held, Activate Supercruise
						  	   ), 0)); }													// ELSE do nothing

																							// Map Flaps Select Toggle to Throttle Axis Presets
	MapKey(&Throttle, FLAPU, EXEC( 															// Flaps UP
								"if(!Throttle[IDLELON]) ActKey(KEYON+PULSE+ThrottlePresetUP);"));	// Safety: Only Activate When Throttle IDLE is not Locked ON
	MapKey(&Throttle, FLAPM, EXEC(								 							// Flaps MIDDLE
								"if(!Throttle[IDLELON]) ActKey(KEYON+PULSE+ThrottlePresetMID);"));  // Safety: Only Activate When Throttle IDLE is not Locked ON
	MapKey(&Throttle, FLAPD, EXEC(								 							// Flaps DOWN
								"if(!Throttle[IDLELON]) ActKey(KEYON+PULSE+ThrottlePresetDOWN);"));	// Safety: Only Activate When Throttle IDLE is not Locked ON

																							// Map Throttle Autopilot to Joystick Curve Presets
	MapKey(&Throttle, APPAT, EXEC("initSetJoystickCurves();"));								// Autopilot PATH UP
	MapKey(&Throttle, APAH,  EXEC("initSetJoystickCurves();"));								// Autopilot ALT/HDG MIDDLE (Default)
	MapKey(&Throttle, APALT, EXEC("initSetJoystickCurves();"));								// Autopilot ALT DOWN


	if(UseRudders == 2){																	// Enables T.Flight Rudder intialisation into script's virtual device *UNTESTED*
		initTFRPRudder(); }
	
	if(UseMFD > 0){ 																		// One or Two MFDs - Initialise via MAP MFD CONTROLS section below *UNTESTED*
		initRightMFD(); }
	if(UseMFD > 1){
		initLeftMFD(); }	
	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//	
// MAP JOYSTICK CONTROLS //																						
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//																										

	MapKey(&Joystick,  TG1, EXEC("initAdvancedFireModule();"));														// Trigger 1 [Main Trigger]
	MapKeyR(&Joystick, TG1, EXEC("initAdvancedFireModule();"));
//	MapKey(&Joystick,  TG2, SecondaryFire);																			// Trigger 2 [Secondary Trigger]

	MapKey(&Joystick,  S1,  TEMPO(PULSE+FireChaffLauncher, PULSE+DeployHeatSink, LongPressDelay)); 					// Master Mode Control 	[Short: Chaff, 			Long: Heat Sink]
	MapKey(&Joystick,  S2,  TEMPO(PULSE+SRVTurret, PULSE+UseShieldCell, LongPressDelay)); 							// Weapon Release 		[Short: ECM/SRV Turret, Long: Shield Cell]
	MapKey(&Joystick,  S3,  EXEC("initAdvancedFireModule();"));														// Trigger 3 [Pinky Button]
	MapKeyR(&Joystick, S3,  EXEC("initAdvancedFireModule();"));
//	MapKey(&Joystick,  S4,  0); 																					// Pinky Trigger Modifier	[DO NOT MAP!]

	MapKey(&Joystick, H1U, TEMPO(EXEC(																				// Trim Switch UP
									"if(!Joystick[S4]) ActKey(KEYON+PULSE+WingmanTarget);"
									"if(Joystick[S4])  ActKey(KEYON+PULSE+FighterDock);"),
								 EXEC(
									"if(!Joystick[S4]) ActKey(KEYON+PULSE+WingmanNavlock);"
									"if(Joystick[S4])  initTextChatPresets();"),
							LongPressDelay));
	MapKey(&Joystick, H1D, TEMPO(EXEC(																				// Trim Switch DOWN
									"if(!Joystick[S4]) ActKey(KEYON+PULSE+SelectWingman2);"
									"if(Joystick[S4])  ActKey(KEYON+PULSE+FighterFollow);"),
								 EXEC(
								 	"if(!Joystick[S4]) ActKey(KEYON+PULSE+FighterOrders);"
								 	"if(Joystick[S4])  initTextChatPresets();"),
							LongPressDelay));
	MapKey(&Joystick, H1L, TEMPO(EXEC(																				// Trim Switch LEFT
									"if(!Joystick[S4]) ActKey(KEYON+PULSE+SelectWingman1);"
									"if(Joystick[S4])  ActKey(KEYON+PULSE+FighterHoldPosition);"),
								 EXEC(
								 	"if(!Joystick[S4]) ActKey(KEYON+PULSE+FighterDefensive);"
								 	"if(Joystick[S4])  initTextChatPresets();"),
							LongPressDelay));	
	MapKey(&Joystick, H1R, TEMPO(EXEC(																				// Trim Switch RIGHT
									"if(!Joystick[S4]) ActKey(KEYON+PULSE+SelectWingman3);"
									"if(Joystick[S4])  ActKey(KEYON+PULSE+FighterHoldFire);"),
								 EXEC(
								 	"if(!Joystick[S4]) ActKey(KEYON+PULSE+FighterAggressive);"
								 	"if(Joystick[S4])  initTextChatPresets();"),
							LongPressDelay));	

//	MapKey(&Joystick, H1U, 0); 																						// Trim Switch UP
//	MapKey(&Joystick, H1D, 0); 																						// Trim Switch DOWN
//	MapKey(&Joystick, H1L, 0); 																						// Trim Switch LEFT
//	MapKey(&Joystick, H1R, 0); 																						// Trim Switch RIGHT

//	MapKey(&Joystick, H2U, 0); 																						// Target Management Switch (TMS) UP
//	MapKey(&Joystick, H2D, 0);																						// Target Management Switch (TMS) DOWN
//	MapKey(&Joystick, H2L, 0); 																						// Target Management Switch (TMS) LEFT
//	MapKey(&Joystick, H2R, 0); 																						// Target Management Switch (TMS) RIGHT

	MapKey(&Joystick, H3U, EXEC("initAdvancedPIPManagement();"));  													// Data Management Switch (DMS) UP		
	MapKey(&Joystick, H3D, EXEC("initAdvancedPIPManagement();"));													// Data Management Switch (DMS) DOWN								
	MapKey(&Joystick, H3L, EXEC("initAdvancedPIPManagement();"));  													// Data Management Switch (DMS) LEFT	
	MapKey(&Joystick, H3R, EXEC("initAdvancedPIPManagement();"));  													// Data Management Switch (DMS) RIGHT	

//	MapKey(&Joystick, H4U, 0); 																						// Countermeasures Management Switch (CMS) UP
//	MapKey(&Joystick, H4D, 0); 																						// Countermeasures Management Switch (CMS) DOWN
//	MapKey(&Joystick, H4L, 0); 																						// Countermeasures Management Switch (CMS) LEFT
//	MapKey(&Joystick, H4R, 0); 																						// Countermeasures Management Switch (CMS) RIGHT
//	MapKey(&Joystick, H4P, 0); 																						// Countermeasures Management Switch (CMS) PUSH

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// MAP THROTTLE ARM CONTROLS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//																									
	MapKey(&Throttle,  SC, TEMPO(0, EXEC(																			// Slew Control Button
										"if(!Throttle[APALT]) if(!Throttle[IDLELON]) ActKey(KEYON+DOWN+SRVVerticalThrust);" // [Hold]
										"if(!Throttle[APALT]) if(!Throttle[IDLELON]) ActKey(KEYON+PULSE+EngineBoost);"),	// [Press]
						   MiniPressDelay));																		// Safety: Won't Boost when in Precise Throttle or IDLE! Plus 150ms Delay :)
	MapKeyR(&Throttle, SC, EXEC(		"ActKey(KEYON+UP+SRVVerticalThrust);"));									// Release the SRV Vertical Thrust


	MapKey(&Throttle,  LTB, TEMPO(EXEC("initHardpointManagement();"),												// Left Throttle Button (RED)
								  EXEC(
								  	   "if(!Joystick[H4P]) if(!Joystick[S4]) ActKey(KEYON+DOWN+ShowCQCScoreboard);" "HPoints=!HPoints;"),//If in CQC: Show Scoreboard (Hold) | If NOT in CQC: Reset Hardpoint Flag (fix alignment issues with Escape Vector Macro)
							LongPressDelay));																		// [Have System selected prior to High Wake]
	MapKeyR(&Throttle, LTB, EXEC(      "ActKey(KEYON+UP+ShowCQCScoreboard);"));										// Release CQC Scoreboard display

//	MapKey(&Throttle,  MSU, 0); 																					// Mic Switch UP
//	MapKey(&Throttle,  MSD, 0); 																					// Mic Switch DOWN
//	MapKey(&Throttle,  MSL, 0); 																					// Mic Switch LEFT
//	MapKey(&Throttle,  MSR, 0); 																					// Mic Switch RIGHT

	MapKey(&Throttle,  MSP, EXEC("initMicCommander();"));															// Mic Switch PUSH
	MapKeyR(&Throttle, MSP, EXEC("initMicCommander();"));															// Mic Switch PUSH RELEASE

//	MapKey(&Throttle,  CSU, 0); 																					// Coolie Hat Switch UP 
//	MapKey(&Throttle,  CSD, 0);																						// Coolie Hat Switch DOWN
//	MapKey(&Throttle,  CSL, 0); 																					// Coolie Hat Switch LEFT
//	MapKey(&Throttle,  CSR, 0); 																					// Coolie Hat Switch RIGHT

	MapKey(&Throttle,  SPDF, EXEC("initEnhancedFAOFF();"));															// Speedbrake Forward TOGGLE ON
	MapKeyR(&Throttle, SPDF, EXEC("initEnhancedFAOFF();"));															// Speedbrake Forward TOGGLE RELEASE
	MapKey(&Throttle,  SPDB, EXEC("initEnhancedFAOFF();"));															// Speedbrake Back HOLD
	MapKeyR(&Throttle, SPDB, EXEC("initEnhancedFAOFF();"));															// Speedbrake Back RELEASE
			
	MapKey(&Throttle,  BSF, PULSE+GalaxyMap); 																		// Boat Switch Throttle FORWARD
	MapKey(&Throttle,  BSM, PULSE+UIBack); 																			// Boat Switch Throttle MIDDLE		[Centering Switch will Exit Maps]
	MapKey(&Throttle,  BSB, PULSE+SystemMap); 																		// Boat Switch Throttle BACK

	if(CruiseOnThrottle == 0){																						// Sets China Hat to add Frame Shift Drive when Cruise on Throttle is disabled.
		MapKey(&Throttle,  CHF, TEMPO(FrameShiftDrive, Supercruise, LongPressDelay)); 								// China Hat FORWARD [When Route Blocked HOLD for Supercruise]
		MapKey(&Throttle,  CHB, TEMPO(PULSE+SelectNextSystemInRoute, PULSE+OrbitalLines, LongPressDelay)); }		// China Hat BACK 	 [Short: Next Sys Route, Very Long: Orbital Lines]
	if(CruiseOnThrottle == 1){																						// Sets China Hat to remove Frame Shift Drive when Cruise on Throttle is enabled.
		MapKey(&Throttle,  CHF, PULSE+OrbitalLines); 																// China Hat FORWARD
		MapKey(&Throttle,  CHB, PULSE+SelectNextSystemInRoute);	}													// China Hat BACK

	if(ChatPresetMode == 0){																						// TEXT CHAT MACRO PRESET [0] = 1 Preset available (Default-Basic 0 Only)
		MapKey(&Throttle,  PSF, PULSE+mShowGameStats); 																// Pinky Throttle Switch FORWARD	[Displays both FPS & PING]
		MapKeyR(&Throttle, PSF, PULSE+mShowGameStats); 																// Pinky Throttle Switch FORWARD RELEASE
//		MapKey(&Throttle,  PSM, 0); 																				// Pinky Throttle Switch MIDDLE
		MapKey(&Throttle,  PSB, PULSE+HideShipGUI);																	// Pinky Throttle Switch BACK		[Hides Ship's Holographic Display]
		MapKeyR(&Throttle, PSB, PULSE+HideShipGUI);	}																// Pinky Throttle Switch BACK RELEASE
	if(ChatPresetMode == 1){																						// TEXT CHAT MACRO PRESET [1] = 3 Presets available
		MapKey(&Throttle,  PSF, EXEC(
								"if(!Joystick[S4]) ChatPreset = 1;"		 											// Pinky Throttle Switch FORWARD
								"if(!Joystick[S4]) printf(\"Chat Preset [%d]: HOSTILE\\x0a\", ChatPreset);"));
//		MapKeyR(&Throttle, PSF, 0);																					// Pinky Throttle Switch FORWARD RELEASE
		MapKey(&Throttle,  PSM, EXEC( 																				// Pinky Throttle Switch MIDDLE
								"if(!Joystick[S4]) ChatPreset = 0;"
								"if(!Joystick[S4]) printf(\"Chat Preset [%d]: PASSIVE (Default)\\x0a\", ChatPreset);"));
		MapKey(&Throttle,  PSB, EXEC(																				// Pinky Throttle Switch BACK
								"if(Joystick[S4])  ActKey(KEYON+PULSE+HideShipGUI);"
								"if(!Joystick[S4]) ChatPreset = 2;"
								"if(!Joystick[S4]) printf(\"Chat Preset [%d]: FRIENDLY\\x0a\", ChatPreset);"));
		MapKeyR(&Throttle, PSB, EXEC(																				// Pinky Throttle Switch BACK RELEASE
								"if(Joystick[S4])  ActKey(KEYON+PULSE+HideShipGUI);"));	}
	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// MAP THROTTLE BASE CONTROLS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//	
	MapKey(&Throttle,  EFLNORM, PULSE+mShowGameStats);		 														// Engine Fuel Flow Norm/Override Switches LEFT
	MapKeyR(&Throttle, EFLNORM, PULSE+mShowGameStats); 																// Engine Fuel Flow Norm/Override Switches LEFT RELEASE
	MapKey(&Throttle,  EFLOVER, 0); 																				// Engine Fuel Flow Norm/Override Switches LEFT OFF

	MapKey(&Throttle,  EFRNORM, EXEC("printf(\"Voice Comms: EXTERNAL CHANNEL SELECTED >>\\x0a\");")); 				// Engine Fuel Flow Norm/Override Switches RIGHT 		[Mic Toggle ON (External/3rd Party)]
//	MapKeyR(&Throttle, EFRNORM, 0); 																				// Engine Fuel Flow Norm/Override Switches RIGHT RELEASE 
	MapKey(&Throttle,  EFROVER, EXEC("printf(\"Voice Comms: E:D GAME CHANNEL SELECTED <<\\x0a\");")); 				// Engine Fuel Flow Norm/Override Switches RIGHT OFF 	[Mic Toggle OFF (Internal/Default)]

	MapKey(&Throttle,  EOLIGN, TEMPO(EXEC("initHeadlookModeSelect();"),	PULSE+TrackIRPause, LongPressDelay));		// Engine Operate Ign/Norm LEFT UP [Short: TIR/VR Center] [Long: TIR Pause]
	MapKey(&Throttle,  EOLNORM, 0); 																				// Engine Operate Ign/Norm LEFT OFF
	MapKey(&Throttle,  EOLMOTOR, EXEC("initMicCommander();"));														// Engine Operate Ign/Norm LEFT DOWN	[Toggle between Push-To-Talk & Open Comms]
	MapKeyR(&Throttle, EOLMOTOR, EXEC("initMicCommander();"));														// Engine Operate Ign/Norm LEFT RELEASE

	MapKey(&Throttle,  EORIGN, TEMPO(EXEC(																			// Engine Operate Ign/Norm RIGHT UP
										"if(!Joystick[S4]) if(!Joystick[H4P]) initToggleShipLights(1);"				// If no Modifier held, default Ship Lights
										"if(Joystick[S4])  ActKey(KEYON+PULSE+ChangeWeaponColor);"					// If Modifier 1 held, Change Weapon Color
										"if(Joystick[H4P]) ActKey(KEYON+PULSE+ChangeEngineColor);"),				// If Modifier 2 held, Change Engine Color
							   PULSE+ShipLights, LongPressDelay));													// [Long: Reset Ship Lights (when out of sync)]
	MapKey(&Throttle,  EORNORM, 0); 																				// Engine Operate Ign/Norm RIGHT OFF
	MapKey(&Throttle,  EORMOTOR, EXEC("initToggleRotationCorrection();"));											// Engine Operate Ign/Norm RIGHT DOWN
	MapKeyR(&Throttle, EORMOTOR, EXEC("initToggleRotationCorrection();")); 											// Engine Operate Ign/Norm RIGHT RELEASE

	MapKey(&Throttle,  APUON, EXEC("initToggleSilentRunning();")); 													// APU START UP
	MapKeyR(&Throttle, APUON, EXEC("initToggleSilentRunning();")); 													// APU START RELEASE
	MapKey(&Throttle,  APUOFF, 0); 																					// APU OFF DOWN

	MapKey(&Throttle,  LDGH, TEMPO(EXEC(																			// Landing Gear/Warning Silence Button 
								  	"if(!Joystick[S4]) ActKey(KEYON+PULSE+TakeSteamScreenshot);"					// [Short: 		 Steam Screenshot]
								  	"if(Joystick[S4])  ActKey(KEYON+PULSE+HighResScreenshot);"),					// [Short+Pinky: Hi-Res Screenshot (Solo/Private Modes only)] 
								  EXEC(
								  	"if(!Joystick[S4]) ActKey(KEYON+PULSE+GPUCaptureVideoAuto);" 					// [Long: 		 Save Last xx mins NVidia]
								  	"if(Joystick[S4])  ActKey(KEYON+PULSE+GPUCaptureManual);"), 					// [Long+Pinky:  Manual Start/Stop NVidia]
							ExtraPressDelay));
							
	MapKey(&Throttle,  EACON, EXEC("initToggleLandingGear();")); 													// EAC ARM UP
	MapKeyR(&Throttle, EACON, EXEC("initToggleLandingGear();"));													// EAC ARM UP RELEASE
	MapKey(&Throttle,  EACOFF, 0); 																					// EAC OFF DOWN

	MapKey(&Throttle,  RDRNRM, EXEC("initToggleCargoScoop();"));													// RDR ALTM NRM UP [Deploy Cargo Scoop]
	MapKeyR(&Throttle, RDRNRM, EXEC("initToggleCargoScoop();"));													// RDR ALTM NRM UP REVERSE
	MapKey(&Throttle,  RDRDIS, 0);

	MapKey(&Throttle,  APENG, TEMPO(EXEC("LightSeqShort = 1;" "initDockNLightsEnhancer();"),						// Autopilot Engage Button 
									EXEC("LightSeqLong  = 1;" "initDockNLightsEnhancer();"),
							  LongPressDelay));
//	MapKey(&Throttle,  APDIS, 0); 																					// Autopilot Disengage Button

	MapKey(&Throttle,  IDLELON, EXEC("initIDLEMaster();" "printf(\"THROTTLE IDLE LOCK: ^^ACTIVE^^\\x0a\");"));		// Throttle Idle Detents LEFT ON	[Locking (Down): Stationary]
	MapKeyR(&Throttle, IDLELON, EXEC("initIDLEMaster();" "printf(\"THROTTLE IDLE LOCK: *DISABLED*\\x0a\");"));		// Throttle Idle Detents LEFT ON RELEASE
//	MapKey(&Throttle,  IDLELOFF, 0);																				// Throttle Idle Detents LEFT OFF
//	MapKey(&Throttle,  IDLERON, 0); 																				// Throttle Idle Detents RIGHT ON
//	MapKeyR(&Throttle, IDLERON, 0);																					// Throttle Idle Detents RIGHT ON RELEASE
//	MapKey(&Throttle,  IDLEROFF, 0); 																				// Throttle Idle Detents RIGHT OFF


	printf("Done... Enhanced ED Script Engineered by Aussiedroid is now running...    Fly Safe CMDR!\x0a");
	printf("-----------------------------------------------------------------------------------------------------------------------------------------------");
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// MAP MFD CONTROLS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
																											// ** CURRENTLY UNMAPPED **
	int initRightMFD(){																						// Set Right MFD
//		MapKey(&RMFD, GAINU, 0);
//		MapKey(&RMFD, GAIND, 0);
//		MapKey(&RMFD, OSB01, 0);
//		MapKey(&RMFD, OSB02, 0);
//		MapKey(&RMFD, OSB03, 0);
//		MapKey(&RMFD, OSB04, 0);
//		MapKey(&RMFD, OSB05, 0);
//		MapKey(&RMFD, OSB06, 0);
//		MapKey(&RMFD, OSB07, 0);
//		MapKey(&RMFD, OSB08, 0);
//		MapKey(&RMFD, OSB09, 0);
//		MapKey(&RMFD, OSB10, 0);
//		MapKey(&RMFD, OSB11, 0);
//		MapKey(&RMFD, OSB12, 0);
//		MapKey(&RMFD, OSB13, 0);
//		MapKey(&RMFD, OSB14, 0);
//		MapKey(&RMFD, OSB15, 0);
//		MapKey(&RMFD, OSB16, 0);
//		MapKey(&RMFD, OSB17, 0);
//		MapKey(&RMFD, OSB18, 0);
//		MapKey(&RMFD, OSB19, 0);
//		MapKey(&RMFD, OSB20, 0);
//		MapKey(&RMFD, BRTU,  0);
//		MapKey(&RMFD, BRTD,  0);
//		MapKey(&RMFD, CONU,  0);
//		MapKey(&RMFD, COND,  0);
		printf("Right MFD Configured\x0a"); }

	int initLeftMFD(){																						// Set Left MFD
//		MapKey(&LMFD, GAINU, 0);
//		MapKey(&LMFD, GAIND, 0);
//		MapKey(&LMFD, OSB01, 0);
//		MapKey(&LMFD, OSB02, 0);
//		MapKey(&LMFD, OSB03, 0);
//		MapKey(&LMFD, OSB04, 0);
//		MapKey(&LMFD, OSB05, 0);
//		MapKey(&LMFD, OSB06, 0);
//		MapKey(&LMFD, OSB07, 0);
//		MapKey(&LMFD, OSB08, 0);
//		MapKey(&LMFD, OSB09, 0);
//		MapKey(&LMFD, OSB10, 0);
//		MapKey(&LMFD, OSB11, 0);
//		MapKey(&LMFD, OSB12, 0);
//		MapKey(&LMFD, OSB13, 0);
//		MapKey(&LMFD, OSB14, 0);
//		MapKey(&LMFD, OSB15, 0);
//		MapKey(&LMFD, OSB16, 0);
//		MapKey(&LMFD, OSB17, 0);
//		MapKey(&LMFD, OSB18, 0);
//		MapKey(&LMFD, OSB19, 0);
//		MapKey(&LMFD, OSB20, 0);
//		MapKey(&LMFD, BRTU,  0);
//		MapKey(&LMFD, BRTD,  0);
//		MapKey(&LMFD, CONU,  0);
//		MapKey(&LMFD, COND,  0);
		printf("Left MFD Configured\x0a"); }

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// EVENT HANDLER //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	int EventHandle(int type, alias o, int x) {
		int LED_BRT;

		if (&o == &Throttle & x == THR_FC & Joystick[S4]) {										// Throttle: LED On-The-Fly Backlight Control
			LED_BRT = (AxisVal(Throttle[THR_FC], &axdata) - 32766) / 256 * -1;					// HOLD S4 (Pinky Trigger) on Joystick & Move Friction Control Axis
			ActKey(PULSE+KEYON+LED (&Throttle, LED_INTENSITY, LED_BRT)); }
		DefaultMapping(&o, x);
	}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//  "I am a leaf on the wind!"  //
//------------------------------//